#
# 1- Crie a superclasse Veiculo e o construtor (__init__) com os atributos comuns:
#    valor, modelo (Corolla, Argo etc.) e km que indica a quilometragem. Teste
# 2- Crie alguns métodos gets e sets.
# 3- Antes do método main, crie a subclasse Carro, que herda da superclasse Veiculo. E o
#    construtor com os atributos valor, modelo, km e qtd_portas. E os métodos get e set.
# 4- Crie três instâncias da subclasse Carro com quatro, três e dois argumentos, teste
# 5- Na classe Carro, sobrescreva o método __str__ do Python, ele retorna todos os dados
#    (atributos), teste
# 6- Antes do método main, crie a subclasse Moto, que herda a superclasse Veiculo. E o
#    construtor com os três atributos comuns e o atributo cilindradas. E os métodos get e set
# 7- Crie duas instâncias (objetos) da classe Moto com quatro e três argumentos. Teste
# 8- Utilize o método vars() para acessar os atributos de Carro e Moto num dicionário.
#    Ex.: print(vars(objeto))
# 9- Use o método __dict__ para acessar os atributos de Carro e Moto num dicionário.
#    Ex.: print(objeto.__dict__)
# 10- Crie o método (def) atualiza valor, ele recebe um valor em reais e não retorna nada.
#     O método acrescenta o valor recebido ao valor de qualquer veículo. Teste.
# 10b- Refaça o item anterior com críticas (filtros) dentro da função.
# 11- Crie o método atualiza_valor_pct, ele recebe a porcentagem (5, 10, 20 etc) e não
#     retorna nada. O método atualiza o valor de qualquer veículo. Faça crítica e teste.


class Veiculo():
    def __init__(self,valor,modelo,km):
        self.valor=valor
        self.modelo=modelo
        self.km=km

    def get_valor(self):
        return self.valor

    def set_valor(self, novo_valor):
        self.valor = novo_valor

    def get_modelo(self):
        return self.modelo

    def set_modelo(self, novo_modelo):
        self.modelo = novo_modelo

    def get_km(self):
        return self.km

    def set_km(self, novo_km):
        self.km = novo_km

    def atualiza_valor(self,vlr_aumento):
        if vlr_aumento>0:
            self.valor +=vlr_aumento
        else:
            print("Erro:valor negativo")



class Carro(Veiculo):
    def __init__(self,valor,modelo,km=1,qtd_portas=4):
        super().__init__(valor,modelo,km)
        self.qtd_porta=qtd_portas

    def get_qtd_portas(self):
        return self.qtd_portas

    def set_qtd_portas(self, novo_qtd_portas):
        self.qtd_portas = novo_qtd_portas

    def __str__(self):
         s = f"Valor: {self.valor}, Modelo: {self.modelo}, Km: {self.km:.2f}"
         return s


class Moto(Veiculo):
    def __init__(self,valor,modelo,km=1,cilindradas=0):
        super().__init__(valor,modelo,km)
        self.cilindradas=cilindradas
    def __str__(self):
        s= f"Valor: {self.valor}, Modelo: {self.modelo}, Km:{self.km:.2f}"
        return s

if __name__ == "__main__":
    c1=Carro(90000.00, "Civic", 1000, 4)

    print("Carro 1:\n",c1)

    m1=Moto(20000.00,"Fan2000",1000,10)
    print("Moto 1;\n",m1)

    print(vars(m1))

    print(c1.__dict__)

    c1.atualiza_valor(1200)
    print(c1)
