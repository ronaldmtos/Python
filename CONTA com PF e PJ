# - Com base nos conceitos de Programação Orientada a Objetos (POO)
# e inheritance (herança), implemente a entidade conta corrente com as
# especificidades de conta corrente de uma pessoa física e de uma pessoa
# jurídica.
#
# Levante as características comuns e as características específica de uma
# conta corrente de pessoa física e de conta corrente de pessoa jurídica.
#
# - Algumas características de uma conta corrente:
# nome, saldo, gênero, CPF, modalidade de PJ e CNPJ
#
# - Implemente estes itens:
#
# 1- Crie a superclasse Conta
# 2- Crie o método construtor com os atributos nome e saldo, teste
# 3- Crie os métodos gets e sets da superclasse, teste
# 4- Sobrescreva o método __str__ para ele retornar os atributos, teste
# 5- Crie a subclasse Conta pessoa física
# 6- Crie o método construtor com os atributos nome, saldo, genero e cpf
# 7- Crie uma instância (objeto) de Conta_PF, teste
# 8- Crie os métodos get e set, teste
# 9- Use os métodos da subclasse Conta_PF
# 10- Use o método do Python vars.              Sintaxe: print(vars(objeto))
# 11- Use o método do Python __dict__                    print(objeto.__dict__)
# 12- Crie a subclasse Conta pessoa jurídica
# 13- Crie o método construtor com os atributos nome, saldo, modalidade e cnpj
# 14- Crie uma instância (objeto) de Conta_PJ
# 15- Crie os método get e set, teste
# 16- Crie o método deposito, ele recebe o valor do depósito e atualiza o saldo, teste
# 17- Crie o método retirada, ele recebe o valor da retirada e atualiza o saldo, teste
# 18- Refaça o método retirada usando RNs (Regras de Negócios) bancárias. Teste
# 19- A política do sistema bancário mudou, o depósito continua sem cobrado tarifa.
#     No saque, a pessoa física tem tarifa de 2 reais e pessoa juridica de 5 reais.
#     Então, substitua o método retirada da superclasse por dois métodos retirada nas
#     duas subclasse.
# 20- Teste a alteração anterior.
# 21- Crie o método retirada_rn2, substitua os dois método retirada nas duas subclasses
#     por um único método (retirada_rn2) na superclasse



class Conta():
    def __init__(self,nome,saldo=0):
        self.nome=nome
        self.saldo=saldo

    def get_nome(self):
        return self.nome

    def set_nome(self, novo_nome):
        self.nome = novo_nome

    def get_saldo(self):
        return self.saldo

    def set_saldo(self, saldo):
        self.saldo = saldo

    def deposito(self,vlr_deposito):
        if vlr_deposito>0:
            self.saldo= self.saldo+vlr_deposito
        else:
            print("O valor do deposito precisa ser positivo")




    def __str__(self):
        s=f"Nome da Conta:{self.nome} e Saldo:{self.saldo}"
        return s
class Conta_PF(Conta):
    def __init__(self,nome,saldo,genero,cpf):
        super().__init__(nome,saldo)
        self.genero=genero
        self.cpf=cpf

    def get_(self):
        return self.nome

    def set_nome(self, novo_nome):
        self.nome = novo_nome

    def retirada(self,vlr_retirada):
        if vlr_retirada < self.saldo:
            self.saldo=self.saldo-vlr_retirada-2,00
        else:
            print("O valor da retirada precisa ser positivo")


class Conta_PJ(Conta):
    def __init__(self, nome, saldo, modalidade, cnpj):
        super().__init__(nome, saldo)
        self.modalidade = modalidade
        self.cnpj = cnpj

    def retirada(self,vlr_retirada):
        if vlr_retirada>0:
            self.saldo=self.saldo-vlr_retirada-5,00
        else:
            print("O valor da retirada precisa ser positivo")

if __name__ == '__main__':
    pf1=Conta_PF("Ronald",6000,"Masculino","06895351396")
    print(pf1)
    print(vars(pf1))
    print(pf1.__dict__)
    print("\n")

    pj1=Conta_PJ("Rodrigo",12000,"Loja","12329344325")
    print(pj1)

    pf1.set_nome("Vitor") #Modificar o nome da pf1
    print(pf1)

    pf1.deposito(1000)  #Depositar 1000 na conta da pf1
    print(pf1)

    pf1.retirada(1000)  #Retira 1000 na conta pf1 e ja tira os 2 reais por ser pessoa fisica
    print(pf1)

    pj1.retirada(2000)
    print(pj1)
